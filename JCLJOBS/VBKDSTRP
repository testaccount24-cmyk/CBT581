//VBKDSTRP   JOB (6948),'TMS PRINT D/R TAPES',
//       TYPRUN=HOLD,
//       TIME=120,CLASS=X,MSGCLASS=W,USER=VMAINT
/*JOBPARM LINES=9999
//*
//*  Build REXX exec on-the-fly PDS to hold REXX Execs
//*
//REXXPDS  EXEC PGM=IEBGENER
//SYSPRINT  DD  SYSOUT=*
//SYSIN     DD  DUMMY
//SYSUT2    DD  DSN=&&REXX(DUMMY),
//             DISP=(NEW,PASS),UNIT=SYSDA,
//             DCB=(LRECL=80,RECFM=FB,BLKSIZE=8000),
//             SPACE=(TRK,(15,5,10))
//SYSUT1    DD  *
Dummy Record as place holder in PDS Build Process
/*
//*
//*  Build REXX exec to strip TMC data gathered from CA-1 database
//*
//REXX1    EXEC PGM=IEBGENER
//SYSIN     DD  DUMMY
//SYSUT2    DD  DSN=&&REXX(TMCSTRIP),
//             DISP=(OLD,PASS)
//SYSPRINT  DD  SYSOUT=*
//SYSUT1    DD  DATA,DLM=##
/*  REXX exec to strip TMC information ------------------------------*/
/*  written:  March 26 2002                                          */
/*  author :  Thomas Hutchins                                        */
/*  Panels :                                                         */
/*  Help   :                                                         */
/*  Message:                                                         */
/*  Changes:  V1.0 -- Initial functions                              */
/*-------------------------------------------------------------------*/
arg parm

  /*---------------------------------------------------------------*/
  /* turn off tso messages                                         */
  /*---------------------------------------------------------------*/
msgstat = msg('OFF')

  /*----------------------------------------------------------------*/
  /*    Read lines of Input Dataset                                 */
  /*----------------------------------------------------------------*/

  'EXECIO * DISKR TMCIN 1 ( FINIS STEM mline.'

  /*---------------------------------------------------------------*/
  /*  Process lines of data                                        */
  /*---------------------------------------------------------------*/

  do i = 1 to mline.0             /* process every line            */

    /* Check for active flag                                       */
    /* If not active discard and go get another record             */
    expand8 = X2B(C2X(substr(mline.i,85,1)))
    if left(expand8,1) == '1' then iterate

    /* Check that the dataset hi-level node is DISASTER            */
    /* If it is not discard and go get another record              */
    if substr(mline.i,7,9) /= 'DISASTER.' then iterate

    /* Strip TMC information that will be passed from record       */
    OUTLVOL = substr(mline.i,1,6)      /* VOLSER                   */
    OUTLDSN = substr(mline.i,7,44)     /* DATASET NAME             */
    OUTLSEQ = substr(mline.i,55,2)     /* VOLUME SEQUENCE          */
    OUTLCDE = substr(mline.i,109,4)    /* LOCATION                 */
    OUTLFIL = substr(' ',1,3)          /* Filler                   */
    OUTLSLT = substr(mline.i,113,4)    /* SLOT NUMBER              */
    OUTLDTE = substr(mline.i,117,4)    /* CREATE DATE              */

    /* create normalized create date for printing                  */
    erg = c2x(OUTLDTE)                                /* chg to hex */
    CMP_strg = left(erg,length(erg)-1)                /* less sign  */
    CMP_juln = right(CMP_strg,length(CMP_strg)-2)     /* julian date*/
    OUTPDTE  = date("N", CMP_juln ,"J")               /* prnt date  */

    /* Build output record from passed information                 */
    fline = OUTLVOL||OUTLDSN||OUTLSEQ||OUTLCDE||OUTLFIL
    fline = fline||OUTLSLT||OUTLDTE||OUTPDTE

    /* FIFO queue the built line for writing                       */
    queue fline

  end

  queue ''                           /* null line EOF: FIFO stack   */

 /*----------------------------------------------------------------*/
 /*    Write lines out from the stack to the output data set       */
 /*----------------------------------------------------------------*/

 'EXECIO * DISKW TMCOUT  (FINIS'

  return
##
//*
//*  Build REXX exec to strip DSNB data gathered from CA-1 database
//*
//REXX2    EXEC PGM=IEBGENER
//SYSIN     DD  DUMMY
//SYSUT2    DD  DSN=&&REXX(DSNBSTRP),
//             DISP=(OLD,PASS)
//SYSPRINT  DD  SYSOUT=*
//SYSUT1    DD  DATA,DLM=##
/*  REXX exec to strip DSNB information -----------------------------*/
/*  written:  March 27 2002                                          */
/*  author :  Thomas Hutchins                                        */
/*  Panels :                                                         */
/*  Help   :                                                         */
/*  Message:                                                         */
/*  Changes:  V1.0 -- Initial functions                              */
/*-------------------------------------------------------------------*/
arg parm

  /*---------------------------------------------------------------*/
  /* turn off tso messages                                         */
  /*---------------------------------------------------------------*/
msgstat = msg('OFF')

  /*----------------------------------------------------------------*/
  /*    Read lines of Input Dataset                                 */
  /*----------------------------------------------------------------*/

  'EXECIO * DISKR TMCIN 1 ( FINIS STEM mline.'

  /*---------------------------------------------------------------*/
  /*  Process lines of data                                        */
  /*---------------------------------------------------------------*/

  do i = 1 to mline.0             /* process every line            */

    /* Check for active flag                                       */
    /* If not active discard and go get another record             */
    expand8 = X2B(C2X(substr(mline.i,2,1)))
    if left(expand8,1) /= '1' then iterate

    /* Check that the dataset hi-level node is DISASTER            */
    /* If it is not discard and go get another record              */
    if substr(mline.i,31,9) /= 'DISASTER.' then iterate

    /* strip DSNB information that will be passed from record      */
    OUTLVOL = substr(mline.i,17,6)     /* VOLSER                   */
    OUTLDSN = substr(mline.i,31,44)    /* DATASET NAME             */
    OUTLSEQ = substr(mline.i,29,2)     /* VOLUME SEQUENCE          */
    OUTLCDE = substr(' ',1,4)          /* LOCATION        - blank  */
    OUTLFIL = substr(' ',1,3)          /* Filler          - blank  */
    OUTLSLT = x2c('00000000')          /* SLOT NUMBER     - zero   */
    OUTLDTE = substr(mline.i,79,4)     /* CREATE DATE              */

    /* create normalized create date for printing                  */
    erg = c2x(OUTLDTE)                                /* chg to hex */
    CMP_strg = left(erg,length(erg)-1)                /* less sign  */
    CMP_juln = right(CMP_strg,length(CMP_strg)-2)     /* julian date*/
    OUTPDTE  = date("N", CMP_juln ,"J")               /* prnt date  */

    /* Build output record from passed information                 */
    fline = OUTLVOL||OUTLDSN||OUTLSEQ||OUTLCDE||OUTLFIL
    fline = fline||OUTLSLT||OUTLDTE||OUTPDTE

    /* FIFO queue the built line for writing                       */
    queue fline

  end

  queue ''                           /* null line EOF: FIFO stack   */

 /*----------------------------------------------------------------*/
 /*    Write lines out from the stack to the output data set       */
 /*----------------------------------------------------------------*/

 'EXECIO * DISKW TMCOUT  (FINIS'

  return
##
//*
//*  Build REXX exec to extract immediate pull information
//*
//REXX3    EXEC PGM=IEBGENER
//SYSIN     DD  DUMMY
//SYSUT2    DD  DSN=&&REXX(PULLEXTR),
//             DISP=(OLD,PASS)
//SYSPRINT  DD  SYSOUT=*
//SYSUT1    DD  DATA,DLM=##
/*  REXX exec to pull immediate need tapes---------------------------*/
/*  written:  March 27 2002                                          */
/*  author :  Thomas Hutchins                                        */
/*  Panels :                                                         */
/*  Help   :                                                         */
/*  Message:                                                         */
/*  Changes:  V1.0 -- Initial functions                              */
/*-------------------------------------------------------------------*/
arg parm

  /*---------------------------------------------------------------*/
  /* turn off tso messages                                         */
  /*---------------------------------------------------------------*/
msgstat = msg('OFF')

  /*----------------------------------------------------------------*/
  /*    Get comparative date                                        */
  /*----------------------------------------------------------------*/

  base_date = DATE('B')            /* Base date of today            */
  daynum = base_date//7            /* Mon=0 ... Sun=6               */

  if daynum = 6 then               /* Compute day of week index     */
    daynum = 0                     /* Sunday is what we are looking */
  else                             /* for.  All indexes are from    */
    daynum = daynum + 1            /* Sunday's date                 */

  base_date = base_date - daynum   /* Compute Sunday's date         */
                                   /* relative to todays date       */

  /* Convert to Julian date for comparison                          */
  Scc = left(date("S", base_date, "B"), 4)            /* yyyy       */
  Syy = left(date("O", base_date, "B"), 2)            /* yy         */
  Sddd =  right(date("D", base_date, "B"), 3, "0")    /* ddd        */
  Sund_date = Scc || Syy || Sddd

  /*----------------------------------------------------------------*/
  /*    Read lines of Input Dataset                                 */
  /*----------------------------------------------------------------*/

  'EXECIO * DISKR PULIN 1 ( FINIS STEM mline.'

  /*---------------------------------------------------------------*/
  /*  Process lines of data                                        */
  /*---------------------------------------------------------------*/

  do i = 1 to mline.0             /* process every line            */

    /* Strip TMC information that will be passed from record       */
    OUTLVOL = substr(mline.i,1,6)      /* VOLSER                   */
    OUTLDSN = substr(mline.i,7,44)     /* DATASET NAME             */
    OUTLSEQ = substr(mline.i,51,2)     /* VOLUME SEQUENCE          */
    OUTLCDE = substr(mline.i,53,4)     /* LOCATION                 */
    OUTLFIL = substr(mline.i,57,3)     /* Filler                   */
    OUTLSLT = substr(mline.i,60,4)     /* SLOT NUMBER              */
    OUTLDTE = substr(mline.i,64,4)     /* CREATE DATE              */
    OUTPDTE = substr(mline.i,68,11)    /* CREATE DATE - print fmt  */

    /* Check for IPL Sar tape regardless of date                   */
    if substr(OUTLDSN,1,17) == 'DISASTER.FDR.TAPE' then
      do
        /* FIFO queue the line for writing                         */
        queue mline.i
        iterate
      end

    /* compute unpacked create date for comparison                 */
    erg = c2x(OUTLDTE)                                /* chg to hex */
    sign = right(erg,1)                               /* get sign   */
    CMP_strg = left(erg,length(erg)-1)                /* less sign  */
    CMP_cent = 1900 + (100 * left(CMP_strg,2))        /* century    */
    CMP_juln = right(CMP_strg,length(CMP_strg)-2)     /* julian date*/
    CMP_july = left(CMP_juln,2)                       /* juln year  */
    CMP_cent = CMP_cent + CMP_july                    /* make yyyy  */
    CMP_DATE = CMP_cent || CMP_juln                   /* comp date  */
    if sign = 'D' then                                /* minus sign */
       CMP_DATE = '-'||CMP_DATE

    /* Compare for tapes greater than or equal to Sunday's date     */
    if CMP_DATE < Sund_date then
      iterate

    /* FIFO queue the built line for writing                       */
    queue mline.i

  end

  queue ''                           /* null line EOF: FIFO stack   */

 /*----------------------------------------------------------------*/
 /*    Write lines out from the stack to the output data set       */
 /*----------------------------------------------------------------*/

 'EXECIO * DISKW PULOUT  (FINIS'

  return
##
//*
//*  SETUP TO GENERATE DATASETS FROM WHICH TO GENERATE USER RPTS
//*
//STRPTMS  EXEC PGM=TMSDATA
//SYSUT1    DD  DSN=OEM1.CA1.TMC,DISP=SHR
//SYSUT3    DD  DSN=&&STMC,DISP=(NEW,PASS),
//             SPACE=(TRK,(300,5),RLSE),UNIT=SYSDA,
//             DCB=(BLKSIZE=8840,BUFNO=4)
//SYSUT4    DD  DSN=&&SDSN,DISP=(NEW,PASS),
//             SPACE=(TRK,(300,5),RLSE),UNIT=SYSDA,
//             DCB=(BLKSIZE=9010,BUFNO=4)
//TMSRPT    DD  SYSOUT=*
//SYSUT4    DD  DUMMY,DCB=BLKSIZE=9010
//SYSPRINT  DD  SYSOUT=*
//SYSOUT    DD  SYSOUT=*
//SORTLIB   DD  DSN=SYS1.SORTLIB,DISP=SHR
//SORTWK01  DD  UNIT=SYSDA,SPACE=(CYL,15)
//SORTWK02  DD  UNIT=SYSDA,SPACE=(CYL,15)
//SORTWK03  DD  UNIT=SYSDA,SPACE=(CYL,15)
//SORTWK04  DD  UNIT=SYSDA,SPACE=(CYL,15)
//SORTWK05  DD  UNIT=SYSDA,SPACE=(CYL,15)
//SORTWK06  DD  UNIT=SYSDA,SPACE=(CYL,15)
//SYSUDUMP  DD  SYSOUT=A
//SYSIN     DD  *
SORTTMC CDATE(D),DSN(A),VOLSEQ(A)
SORTDSNB CDATE(D),DSN(A)
/*
//*
//* Execute REXX exec to strip TMC information and report
//*
//TMCSTRIP EXEC PGM=IKJEFT01,PARM=TMCSTRIP
//SYSPROC   DD  DSNAME=*.REXX1.SYSUT2,DISP=(OLD,PASS)
//SYSPRINT  DD  SYSOUT=*
//SYSUDUMP  DD  SYSOUT=*
//SYSTSPRT  DD  SYSOUT=*
//SYSTSIN   DD  DUMMY
//TMCIN   DD DISP=(OLD,PASS),UNIT=VIO,
//             DSN=&&STMC
//TMCOUT  DD DISP=(NEW,PASS),UNIT=VIO,
//             DSN=&&MREC,
//             SPACE=(TRK,(15,15),RLSE),
//             RECFM=FB,LRECL=80,BLKSIZE=0
//*
//* Execute REXX exec to strip DSNB information and report
//*
//DSNBSTRP EXEC PGM=IKJEFT01,PARM=DSNBSTRP
//SYSPROC   DD  DSNAME=*.REXX2.SYSUT2,DISP=(OLD,PASS)
//SYSPRINT  DD  SYSOUT=*
//SYSUDUMP  DD  SYSOUT=*
//SYSTSPRT  DD  SYSOUT=*
//SYSTSIN   DD  DUMMY
//TMCIN   DD DISP=(OLD,PASS),UNIT=VIO,
//             DSN=&&SDSN
//TMCOUT  DD DISP=(NEW,PASS),UNIT=VIO,
//             DSN=&&DSNB,
//             SPACE=(TRK,(15,15),RLSE),
//             RECFM=FB,LRECL=80,BLKSIZE=0
//*
//*  SORT DATASET RECORDS BY CREATE DATE DESCENDING
//*                            FILE NAME ASCENDING
//SORT1    EXEC PGM=SORT,TIME=120
//SYSOUT    DD  SYSOUT=*
//SYSUDUMP  DD  SYSOUT=*
//SORTIN    DD  DISP=(OLD,PASS),UNIT=SYSDA,DSN=&&MREC
//          DD  DISP=(OLD,PASS),UNIT=SYSDA,DSN=&&DSNB
//SORTOUT   DD  DISP=(NEW,PASS),DSN=&&TEMP,
//             SPACE=(TRK,(300,30)),UNIT=SYSDA,
//             DCB=(RECFM=FB,LRECL=80,BLKSIZE=4080)
//SYSIN     DD  *
 SORT FIELDS=(64,4,BI,D,7,44,CH,A)
/*
//SORTWK01  DD  UNIT=SYSDA,SPACE=(CYL,10)
//SORTWK02  DD  UNIT=SYSDA,SPACE=(CYL,10)
//SORTWK03  DD  UNIT=SYSDA,SPACE=(CYL,10)
//SORTWK04  DD  UNIT=SYSDA,SPACE=(CYL,10)
//SORTWK05  DD  UNIT=SYSDA,SPACE=(CYL,10)
//SORTWK06  DD  UNIT=SYSDA,SPACE=(CYL,10)
//*
//* Execute REXX exec to extract immediate pull tapes for recovery
//*
//PULLEXTR EXEC PGM=IKJEFT01,PARM=PULLEXTR
//SYSPROC   DD  DSNAME=*.REXX3.SYSUT2,DISP=(OLD,PASS)
//SYSPRINT  DD  SYSOUT=*
//SYSUDUMP  DD  SYSOUT=*
//SYSTSPRT  DD  SYSOUT=*
//SYSTSIN   DD  DUMMY
//PULIN   DD DISP=(OLD,PASS),UNIT=VIO,
//             DSN=&&TEMP
//PULOUT  DD DISP=(NEW,PASS),UNIT=VIO,
//             DSN=&&PXTR,
//             SPACE=(TRK,(15,15),RLSE),
//             RECFM=FB,LRECL=80,BLKSIZE=0
//*
//*  CREATE REPORT OF DISASTER RECOVER TAPE DATASETS THAT
//*  CAN BE PULLED IMMEDIATELY
//*
//PULLREPT EXEC PGM=QUIKJOB,TIME=30
//SYSUT1    DD  DISP=(OLD,PASS),UNIT=SYSDA,DSN=&&PXTR
//SYSPRINT  DD  DSN=&&PRNT,DISP=(NEW,PASS),
//             SPACE=(TRK,(300,30)),UNIT=SYSDA,
//             DCB=(RECFM=FBA,LRECL=133,BLKSIZE=4522)
//SYSIN     DD  *
OPTION SEQCHK=NO,LISTOPT=NO,LIST=NO,PFLEOPT=NO
*
EQU  OUTLVOL   INF1-6             /* VOLSER              1  6
EQU  OUTLDSN   INF7-50            /* DATASET NAME        7 44
EQU  OUTLSEQ   INF51-52-B         /* VOLUME SEQUENCE    51  2
EQU  OUTLCDE   INF53-56           /* LOCATION           53  4
EQU  OUTLSLT   INF60-63-B         /* SLOT NUMBER        60  4
EQU  OUTLDTE   INF64-67-P         /* CREATE DATE        64  4
EQU  OUTPDTE   INF68-78           /* CREATE DATE - prnt 68 11
*
* REPORT TITLES
*
TITLE1 'AGCO CORPORATION'
TITLE2 'IMMEDIATE DISASTER/RECOVERY TAPES'
*
* SET UP REPORTS
*
REPORT OUTLVOL (CART-VOLUME)
       OUTLDSN (DATASET-NAME)
       OUTLSEQ (SEQ-NUMBER)
       OUTLCDE (LOCATION)
       OUTLSLT (LOCATION-SLOT)
       OUTPDTE (CREATE-DATE)
BREAK 1 OUTLDTE SB 1 SA 1
*
* PROCESSING SECTION
*
010 GET INF ATEND EOJ
*
    CHECKBREAKS
    PRINT REPORT
    GOTO 10.
*
*   END OF DATA PROCESSING
*
999 END
/*
//*
//*  SORT DATASET RECORDS BY VOLSER ASCENDING, SEQUENCE ASCENDING
//*
//SORT2    EXEC PGM=SORT,TIME=120
//SYSOUT    DD  SYSOUT=*
//SYSUDUMP  DD  SYSOUT=*
//SORTIN    DD  DISP=(OLD,PASS),UNIT=SYSDA,DSN=&&PXTR
//SORTOUT   DD  DISP=(NEW,PASS),DSN=&&PXTS,
//             SPACE=(TRK,(300,30)),UNIT=SYSDA,
//             DCB=(RECFM=FB,LRECL=80,BLKSIZE=4080)
//SYSIN     DD  *
 SORT FIELDS=(1,6,CH,A,51,2,CH,A)
/*
//SORTWK01  DD  UNIT=SYSDA,SPACE=(CYL,10)
//SORTWK02  DD  UNIT=SYSDA,SPACE=(CYL,10)
//SORTWK03  DD  UNIT=SYSDA,SPACE=(CYL,10)
//SORTWK04  DD  UNIT=SYSDA,SPACE=(CYL,10)
//SORTWK05  DD  UNIT=SYSDA,SPACE=(CYL,10)
//SORTWK06  DD  UNIT=SYSDA,SPACE=(CYL,10)
//*
//*  CREATE REPORT OF DISASTER RECOVER TAPE DATASETS THAT
//*  CAN BE PULLED IMMEDIATELY BY VOLSER AS CHECKLIST
//*  DO NOT SHOW DUPLICATE VOLSERS
//*
//PULLREP2 EXEC PGM=QUIKJOB,TIME=30
//SYSUT1    DD  DISP=(OLD,DELETE),UNIT=SYSDA,DSN=&&PXTS
//SYSPRINT  DD  DISP=(MOD,PASS),UNIT=SYSDA,DSN=&&PRNT
//SYSIN     DD  *
OPTION SEQCHK=NO,LISTOPT=NO,LIST=NO,PFLEOPT=NO
*
EQU  VOLXER    WST1-6             /* VOLSER              1  6
*
EQU  OUTLVOL   INF1-6             /* VOLSER              1  6
EQU  OUTLDSN   INF7-50            /* DATASET NAME        7 44
EQU  OUTLSEQ   INF51-52-B         /* VOLUME SEQUENCE    51  2
EQU  OUTLCDE   INF53-56           /* LOCATION           53  4
EQU  OUTLSLT   INF60-63-B         /* SLOT NUMBER        60  4
EQU  OUTLDTE   INF64-67-P         /* CREATE DATE        64  4
EQU  OUTPDTE   INF68-78           /* CREATE DATE - prnt 68 11
*
* REPORT TITLES
*
TITLE1 'AGCO CORPORATION'
TITLE2 'IMMEDIATE DISASTER/RECOVERY TAPE CHECKLIST'
*
* SET UP REPORTS
*
REPORT OUTLVOL (CART-VOLUME)
       OUTLDSN (DATASET-NAME)
       OUTLSEQ (SEQ-NUMBER)
       OUTLCDE (LOCATION)
       OUTLSLT (LOCATION-SLOT)
       OUTPDTE (CREATE-DATE)
*
* PROCESSING SECTION
*
    GET INF
    MOVE OUTLVOL TO VOLXER
    PRINT REPORT
*
010 GET INF ATEND EOJ
*
    IF OUTLVOL EQ VOLXER
      GOTO 10.
*
    MOVE OUTLVOL TO VOLXER
    PRINT REPORT
    GOTO 10.
*
*   END OF DATA PROCESSING
*
999 END
/*
//*
//*  CREATE REPORT OF DISASTER RECOVER TAPE DATASETS
//*
//TAPEREPT EXEC PGM=QUIKJOB,TIME=30
//SYSUT1    DD  DISP=(OLD,PASS),UNIT=SYSDA,DSN=&&TEMP
//SYSPRINT  DD  DISP=(MOD,PASS),UNIT=SYSDA,DSN=&&PRNT
//SYSIN     DD  *
OPTION SEQCHK=NO,LISTOPT=NO,LIST=NO,PFLEOPT=NO
*
EQU  OUTLVOL   INF1-6             /* VOLSER              1  6
EQU  OUTLDSN   INF7-50            /* DATASET NAME        7 44
EQU  OUTLSEQ   INF51-52-B         /* VOLUME SEQUENCE    51  2
EQU  OUTLCDE   INF53-56           /* LOCATION           53  4
EQU  OUTLSLT   INF60-63-B         /* SLOT NUMBER        60  4
EQU  OUTLDTE   INF64-67-P         /* CREATE DATE        64  4
EQU  OUTPDTE   INF68-78           /* CREATE DATE - prnt 68 11
*
* REPORT TITLES
*
TITLE1 'AGCO CORPORATION'
TITLE2 'DISASTER/RECOVERY TAPES'
*
* SET UP REPORTS
*
REPORT OUTLVOL (CART-VOLUME)
       OUTLDSN (DATASET-NAME)
       OUTLSEQ (SEQ-NUMBER)
       OUTLCDE (LOCATION)
       OUTLSLT (LOCATION-SLOT)
       OUTPDTE (CREATE-DATE)
BREAK 1 OUTLDTE SB 1 SA 1
*
* PROCESSING SECTION
*
010 GET INF ATEND EOJ
*
    CHECKBREAKS
    PRINT REPORT
    GOTO 10.
*
*   END OF DATA PROCESSING
*
999 END
/*
//*
//*  PRODUCE LISTCAT OF DISASTER/RECOVERY CATALOG
//*
//LISTCAT  EXEC PGM=IDCAMS
//SYSPRINT  DD  DSN=&&LSTC,DISP=(NEW,PASS),
//             SPACE=(TRK,(300,5),RLSE),UNIT=SYSDA,
//             DCB=(RECFM=VBA,LRECL=125,BLKSIZE=4504)
//SYSIN     DD  *
  LISTCAT LVL(DISASTER) VOLUME CAT(UCAT.DISASTER)
/*
//*
//*  CONCATENATE LISTCAT REPORT TO D/R TAPE REPORT
//*
//MERGERPT EXEC PGM=QUIKJOB,TIME=30
//SYSUT1    DD  DISP=(OLD,PASS),UNIT=SYSDA,DSN=&&LSTC
//SYSPRINT  DD  DISP=(MOD,PASS),UNIT=SYSDA,DSN=&&PRNT
//SYSIN     DD  *
OPTION SEQCHK=NO,LISTOPT=NO,LIST=NO,PFLEOPT=NO
*
* PROCESSING SECTION
*
010 GET INF ATEND EOJ
*
    MOVE SPACES TO PRT1-132.
*
    MOVE INF1-2-B TO WST1-2-B.
    SUB C'5' FR WST1-2-B.
    MOVE INF6 TO PRT1 WST1-2-B.
    SET PCC INF5.
    PRINT.
    GOTO 10.
*
*   END OF DATA PROCESSING
*
999 END
/*
//*
//*  PRINT SUPERVTOC LISTING OF ALL DASD VOLUMES
//*
//FDRVTOC  EXEC PGM=FDREPORT
//SYSPRINT  DD  SYSOUT=*
//ABRMAP    DD  DISP=(NEW,PASS),
//             DSN=&&VTOC,
//             UNIT=SYSDA,
//             SPACE=(TRK,(5,5),RLSE),
//             DCB=(RECFM=FBA,LRECL=133,BLKSIZE=23142)
//SORTWK01  DD  SPACE=(TRK,60,,CONTIG),UNIT=SYSDA
//SORTWK02  DD  SPACE=(TRK,60,,CONTIG),UNIT=SYSDA
//SORTWK03  DD  SPACE=(TRK,60,,CONTIG),UNIT=SYSDA
//SYSIN     DD  *
  DEFAULT PAGEWIDTH=132
  TITLE   LINE='CONTENTS OF VTOC'
  SELECT  VOLG=(C,H,O2A,PA,S,T,V,R)
  EXCLUDE DSN=****VTOC
  REPORT  FIELD=(NAME,DSORG,RECFM,BLKSIZE,LRECL,NOEXTENT,SECALLOC,
           %USED,SIZE,CRDATE,LRDATE,VOL)
  PRINT   SORT=NO
/*
//*
//QIKPRNT1 EXEC PGM=QUIKJOB,TIME=30
//SYSPRINT  DD  SYSOUT=*
//SYSUT1    DD  DISP=(OLD,PASS),DSN=&&VTOC
//SYSUT2    DD  DSN=&&VTOC1,DISP=(NEW,PASS),
//            UNIT=SYSDA,
//            SPACE=(CYL,(2,2)),
//            DCB=(RECFM=FB,LRECL=100,BLKSIZE=4500)
//SYSIN     DD  *
OPTION SEQCHK=NO,LISTOPT=NO,LIST=NO,PFLEOPT=NO
EQU  IN-DSN    INF2-45            /* DATASET NAME
EQU  IN-DSORG  INF47-49           /* DATASET ORGANIZATION
EQU  IN-RECFM  INF51-53           /* RECORD FORMAT
EQU  IN-BLKSIZ INF57-61           /*        BLOCK SIZE
EQU  IN-LRECL  INF63-67           /*        LRECL
EQU  IN-XTNT   INF69-71           /* EXTENTS
EQU  IN-TRACKS INF86-90           /* TOTAL ALLOCATED TRACKS
EQU  IN-CDATE  INF92-99           /* CREATE DATE
EQU  IN-ADATE  INF101-108         /* ACCESS DATE
*
EQU  WORKAREA  WST                /*
EQU  SCANVAL   (4)-B              /* FILE NAME PERIOD SCAN
EQU  LEVEL     (8)                /* DATASET HI-LEVEL QUALIFIER
EQU  VOLSER    (6)                /* VOLSER
EQU  VOLSERX   (LEVEL)          /* REDEFINES PRIOR FIELD ALIGNMENT
EQU  VOLSERF3  (3)                /* VOLSER FIRST 3
EQU  VOLSERL3  (3)                /* VOLSER LAST  3
EQU  OUTLINE   (85)               /* OUTPUT LINE
EQU  OUTLFILL  (VOLSER)         /* REDEFINES PRIOR FIELD ALIGNMENT
EQU  OUTLDSN   (44)               /* DATASET NAME        1 44
EQU  OUTLVOL   (6)                /* VOLSER             45  6
EQU  OUTLDSO   (3)                /* DSORG              51  3
EQU  OUTLRCF   (3)                /* RECFM              54  3
EQU  OUTLBLK   (5)                /* BLOCKSIZE          57  5
EQU  OUTLRCL   (6)                /* LOGICAL REC LENGTH 62  6
EQU  OUTLTRK   (6)                /* ALLOCATED TRACKS   68  6
EQU  OUTLACC   (8)                /* LAST ACCESSED      74  8
EQU  OUTLEVL   (8)                /* HILEVEL QUALIFIER  82  8
*
* PROCESSING SECTION
*
010 GET INF ATEND 900
*
    IF INF1  IS EQ TO C'1'       /* DELETE
      GO TO 10.
    IF INF1-2 IS EQ TO C'0 '     /* DELETE
      GO TO 10.
    IF INF1-2 IS EQ TO C'  '     /* DELETE
      GO TO 10.
    IF INF1-11 IS EQ TO C' ENTRY NAME'  /* DELETE
      GO TO 10.
    IF INF1-11 IS EQ TO C' ----------'  /* DELETE
      GO TO 10.
    IF INF2-7  IS EQ TO C'***ABR'       /* DELETE
      GO TO 10.
*
*
    MOVE INF110-115 TO VOLSER.
*
*
    MOVE SPACES     TO LEVEL.
    WHEN IN-DSN INCLUDES C'.'
      MOVE IN-DSN TO LEVEL VAL225-228-B.
    IF LEVEL IS EQUAL TO SPACES
      MOVE INF2-9 TO LEVEL.
*
    MOVE SPACES     TO OFA1-90.
    MOVE SPACES     TO OUTLINE.
    MOVE IN-DSN     TO OUTLDSN.
    MOVE VOLSER     TO OUTLVOL.
    MOVE IN-DSORG   TO OUTLDSO.
    MOVE IN-RECFM   TO OUTLRCF.
    MOVE IN-BLKSIZ  TO OUTLBLK.
    MOVE IN-LRECL   TO OUTLRCL.
    MOVE IN-TRACKS  TO OUTLTRK.
    MOVE IN-ADATE   TO OUTLACC.
    MOVE LEVEL      TO OUTLEVL.
    MOVE OUTLINE    TO OFA1-90.
    WRITE OFA.
    GO TO 10.
*
*   END OF DATA PROCESSING
*
900 GO TO EOJ.
999 END
/*
//*
//SORTDSN  EXEC PGM=SORT
//SYSOUT    DD  SYSOUT=*
//SYSUDUMP  DD  SYSOUT=A
//SORTIN    DD  DISP=(OLD,PASS),DSN=&&VTOC1,UNIT=SYSDA
//SORTOUT   DD  DSN=&&VTOC2,DISP=(NEW,PASS),
//            UNIT=SYSDA,
//            SPACE=(CYL,(2,2)),
//            DCB=(RECFM=FB,LRECL=100,BLKSIZE=4500)
//SYSIN     DD  *
 SORT FIELDS=(1,44,CH,A)
//SORTWK01  DD  UNIT=SYSDA,SPACE=(CYL,30)
//SORTWK02  DD  UNIT=SYSDA,SPACE=(CYL,30)
//SORTWK03  DD  UNIT=SYSDA,SPACE=(CYL,30)
//SORTWK04  DD  UNIT=SYSDA,SPACE=(CYL,30)
//SORTWK05  DD  UNIT=SYSDA,SPACE=(CYL,30)
//SORTWK06  DD  UNIT=SYSDA,SPACE=(CYL,30)
//*
//QIKPRNT2 EXEC PGM=QUIKJOB,TIME=30
//RPTPRINT  DD  DISP=(MOD,PASS),UNIT=SYSDA,DSN=&&PRNT
//SYSPRINT  DD  SYSOUT=*
//SYSUT1    DD  DISP=(OLD,PASS),DSN=&&VTOC2
//SYSUT2    DD  SYSOUT=*
//SYSIN     DD  *
OPTION SEQCHK=NO,RPTDD=RPTPRINT,LISTOPT=NO,LIST=NO,PFLEOPT=NO
EQU  IN-DSN    INF1-44            /* DATASET NAME
EQU  IN-VOLSER INF45-50           /* VOL SER
EQU  IN-DSORG  INF51-53           /* DATASET ORGANIZATION
EQU  IN-RECFM  INF54-56           /* RECORD FORMAT
EQU  IN-BLKSIZ INF57-61           /*        BLOCK SIZE
EQU  IN-LRECL  INF62-67           /*        LRECL
EQU  IN-TRACKS INF68-73           /* TOTAL ALLOCATED TRACKS
EQU  IN-ADATE  INF74-81           /* ACCESS DATE
EQU  IN-LEVEL  INF82-89           /* HI LEVEL QUAL
*
EQU  WORKAREA  WST                /*
EQU  LEVEL     (7)                /* LEVEL BREAK
*
* REPORT SECTION
*
TITLE 'AGCO DISASTER/RECOVERY DATASET PLACEMENT'
REPORT IN-DSN (DATASET NAME) IN-VOLSER (VOLSER) IN-DSORG (DSORG)
       IN-RECFM (RECFM) IN-BLKSIZ (BLKSIZE) IN-LRECL(LRECL)
       IN-TRACKS (ALLOCATED-TRACKS) IN-ADATE (LAST REFERENCED-DATE)
*
* PROCESSING SECTION
*
001 GET INF
    MOVE IN-LEVEL TO LEVEL.
    GO TO 20.
*
010 GET INF ATEND 900
*
020 SET PCC SINGLESPACE.
*
    IF IN-LEVEL IS NOT EQ TO LEVEL
      MOVE IN-LEVEL TO LEVEL
      SET PCC TRIPLESPACE.
*
    PRINT REPORT.
    GO TO 10.
*
*   END OF DATA PROCESSING
*
900 GO TO EOJ.
999 END
/*
//*
//*  REPORT ON SYSRES MEMBER IN DISASTER.RECOVER.JCLLIB
//*
//QIKPRNT3 EXEC PGM=QUIKJOB,TIME=30
//SYSPRINT  DD  SYSOUT=*
//SYSUT1    DD  DISP=SHR,DSN=DISASTER.RECOVER.JCLLIB(SYSRES)
//SYSUT2    DD  DISP=(MOD,PASS),UNIT=SYSDA,DSN=&&PRNT
//SYSIN     DD  *
OPTION SEQCHK=NO,LISTOPT=NO,LIST=NO,PFLEOPT=NO
EQU  IN-MEM    INF1-80            /* SYSRES LINE INFORMATION
*
EQU  OUT-CC    OFA1               /* OUTPUT CARRIAGE CONTROL CHAR
EQU  OUT-MEM   OFA2-81            /* OUTPUT LINE
EQU  OUT-FILL  OFA82-133          /* OUTPUT LINE
*
* PROCESSING SECTION
*
    MOVE C'1' TO OFA1.
    MOVE BLANKS TO OFA2-133.
    MOVE C'AGCO DISASTER/RECOVERY ' TO OFA2-25.
    MOVE C'SYSIPL INFORMATION' TO OFA26-42.
    WRITE OFA.
*
    MOVE C'0' TO OFA1.
    MOVE BLANKS TO OFA2-133.
    WRITE OFA.
    MOVE C'0' TO OFA1.
    MOVE BLANKS TO OFA2-133.
    WRITE OFA.
*
100 GET INF
    MOVE C' ' TO OUT-CC.
    MOVE IN-MEM TO OUT-MEM.
    WRITE OFA.
    GO TO 100.
*
999 END
/*
//*
//*  PRINT DISASTER/RECOVERY LISTINGS FOR VAULT
//*
//VAULT    EXEC PGM=IEBGENER
//SYSPRINT  DD  SYSOUT=Z
//SYSIN     DD  DUMMY
//SYSUT1    DD  DISP=(OLD,PASS),UNIT=SYSDA,DSN=&&PRNT
//SYSUT2    DD  SYSOUT=A,SPIN=UNALLOC
//*
//*  PRINT DISASTER/RECOVERY LISTINGS FOR DATACENTER
//*
//DATACNTR EXEC PGM=IEBGENER
//SYSPRINT  DD  SYSOUT=Z
//SYSIN     DD  DUMMY
//SYSUT1    DD  DISP=(OLD,PASS),UNIT=SYSDA,DSN=&&PRNT
//SYSUT2    DD  SYSOUT=A,SPIN=UNALLOC
//
