/*--------------------- REXX ----------------------------------------*
 ¦                                                                   ¦
 ¦ VOLUME "CONFIGURATOR" FOR DISASTER RECOVERY JCL BUILDER           ¦
 ¦                                                                   ¦
 ¦ THIS REXX EXEC WILL BUILD AND DISPLAY A TABLE OF "VOLUMES"        ¦
 ¦ WITH SIMPLE RULES AND WILL THEN BUILD JCL AS REQUESTED.           ¦
 ¦                                                                   ¦
 ¦ DEFAULTS_TABLE maybe modified for your individual shop.           ¦
 ¦                                                                   ¦
 ¦ BEFORE CALLING THIS EXEC, THE FOLLOWING DATASETS MUST BE          ¦
 ¦ ALLOCATED BEFORE ENTRY:                                           ¦
 ¦                                                                   ¦
 ¦   ISPSLIB - Skeleton Library                                      ¦
 ¦   ISPTLIB - Table Input Library                                   ¦
 ¦   ISPTABL - Table Output Library                                  ¦
 ¦   ISPFILE - File Tailoring Output Library - MUST BE A PDS         ¦
 ¦                                                                   ¦
 ¦ The Dataset Name of ISPSLIB and ISPFILE must be the same as       ¦
 ¦ calling parms 2 and 3 respectively.                               ¦
 ¦                                                                   ¦
 ¦ Calling Parameters: c_table_name - name of table                  ¦
 ¦                     c_job_dsn    - name job dataset               ¦
 ¦                     c_skel_dsn   - name skeleton dataset          ¦
 ¦                     c_skel_mem   - name skeleton member           ¦
 ¦                                                                   ¦
 ¦ ENVIRONMENT: TSO ISPF                                             ¦
 ¦                                                                   ¦
 ¦ EXECUTION:   %RCVRCNFG                                            ¦
 ¦                                                                   ¦
 ¦ LOGIC:       THIS EXEC WILL ATTEMPT TO OPEN THE VOLUME TABLE      ¦
 ¦              REQUESTED.                                           ¦
 ¦                                                                   ¦
 ¦              WHEN OPEN RC = 0 CALLER WILL HAVE OPTION TO ERASE    ¦
 ¦                               AND START OVER OR DISPLAY.          ¦
 ¦                                                                   ¦
 ¦              WHEN OPEN RC = 8 TABLE WILL BE BUILT.                ¦
 ¦                                                                   ¦
 ¦              WHEN OPEN RC = 12 CALLER WILL BE NOTIFIED AND EXEC   ¦
 ¦                             WILL TERMINATE.                       ¦
 ¦                                                                   ¦
 ¦              ON CREATION A 'DUMMY' ENTRY IS PLACED IN THE TABLE   ¦
 ¦                                                                   ¦
 ¦                                                                   ¦
 ¦ PANELS:      CNFGDISP  Displays Table of Volumes                  ¦
 ¦              CNFGADDV  Displays a Data Entry Panel                ¦
 ¦              CNFGJOBS  Displays Table of Job Status               ¦
 ¦              CNFGSTRT  Displays a Table Name and JCL Panel        ¦
 ¦              CNFGVSER  Displays a Mass Change Volume Panel        ¦
 ¦                                                                   ¦
 ¦                                                                   ¦
 ¦ PF KEYS: PF3 ON CNFGDISP exits process                            ¦
 ¦          PF3 ON CNFGADDV processes data (if any)                  ¦
 ¦          PF3 ON CNFGVSER exits process                            ¦
 ¦          PF3 ON CNFGSTAT exits process                            ¦
 ¦                                                                   ¦
 ¦ COMMANDS:    ON CNFGDISP "BLDJCL" Builds JCL for all entries      ¦
 ¦                          "SUBJOB" Submits all generated jobs      ¦
 ¦                          "ADDVOL" Adds volumes                    ¦
 ¦                          "DOOVER" Delete table values start over  ¦
 ¦                          "SECURE" Generates ICK/DSF secure volume ¦
 ¦                          "EDTVOL" Allows multiple Volume Edits    ¦
 ¦                          "DUPVOL" Checks for duplicate volume     ¦
 ¦                                   assignments                     ¦
 ¦                          "JOBSTA" Displays status of submitted    ¦
 ¦                                   jobs and allows views of        ¦
 ¦                                   completed jobs                  ¦
 ¦                CNFGJOBS "REFRESH" Re-builds jobstatus entries     ¦
 ¦                         "XCHECK"  Shows only those jobstatus      ¦
 ¦                                   entries that are OUTPUT and     ¦
 ¦                                   not yet checked                 ¦
 ¦                                                                   ¦
 ¦ SELECTION CODES: CNFGDISP "S" Submits job for this volume         ¦
 ¦                           "D" Deletes this volume from table      ¦
 ¦                           "E" Edit/display JCL                    ¦
 ¦                           "K" Edit/display Skeleton member        ¦
 ¦                           "J" Regenerate JCL for job              ¦
 ¦                           "P" Set job status to complete          ¦
 ¦                           "M" over typed data is modified         ¦
 ¦                           NULL over typed data is modified        ¦
 ¦                                                                   ¦
 ¦                  CNFGSTAT "S" Views output of executed jobs       ¦
 ¦                                                                   ¦
 *-------------------------------------------------------------------*/

  trace

  parse arg c_table_name c_job_dsn c_skel_dsn c_skel_mem .

  /* Verify existence of job and skeleton dataset */

  x = sysdsn("'"||c_job_dsn||"'")
  y = sysdsn("'"||c_skel_dsn||"'")

  if x ¬= "OK" | y ¬= "OK" then
     do
       say "RCVRCNFG - JOB DATASET STATUS IS:" x
       say "RCVRCNFG - SKELS DATASET STATUS IS:" y
       say "RCVRCNFG - Cannot Continue."
       exit 12
     end

 /*------------------------------------------------------------------*
  ¦ Routine Main Line                                                ¦
  ¦                                                                  ¦
  ¦    (1) Set environment to ISPEXEC.                               ¦
  ¦    (2) Tell ISPF to send all errors back to me.                  ¦
  ¦    (2.1) If returns a '-3' then ispf is not active.              ¦
  ¦    (3) Open Table                                                ¦
  ¦    (4) Call Routine(s) based on return code                      ¦
  ¦                                                                  ¦
  *------------------------------------------------------------------*/

  address ispexec

  "CONTROL ERRORS RETURN"

  if rc = -3 then
     do
       say "RCVRCNFG - ISPF Environment Not Valid."
       exit 12
     end

  "TBOPEN" c_table_name "WRITE"

  select

        when rc = 0 then                 /* Table OK         */
             do
               call proc_display_panel
               "TBEND" c_table_name
               exit result
             end

        when rc = 8 then                 /* Table Not Found  */
             do
               call proc_create_table
               if result ¬= 0 then
                  do
                    exit 12
                  end
               call proc_display_panel
               "TBEND" c_table_name
               exit result
             end

        when rc = 12 then                /* Table In Use     */
             do
               say "RCVRCNFG - Table:" c_table_name
               say "                  Is In Use. Please Try Later."
               exit 4
             end

  otherwise                              /* Serious Error    */
           do
             say "RCVRCNFG - TABLE OPEN FOR" c_table_name
             say "RCVRCNFG - RETURNED RC" rc
             exit 12
           end
  end

 /*------------------------------------------------------------------*
  ¦ END OF MAIN LINE                                                 ¦
  *------------------------------------------------------------------*/

 /*------------------------------------------------------------------*
  ¦ SUB-ROUTINE - Create Table PROC_CREATE_TABLE                     ¦
  ¦                                                                  ¦
  ¦    This subroutine creates the volume/job table.                 ¦
  ¦                                                                  ¦
  ¦    The table consists of one table row for each volume           ¦
  ¦    available at the away site.                                   ¦
  ¦                                                                  ¦
  ¦    The Default Sort Sequence is VOLDDD,CH,A                      ¦
  ¦                                                                  ¦
  ¦    Table Fields:                                                 ¦
  ¦                                                                  ¦
  ¦    VOLUUU - Unit Address - 4 digit                               ¦
  ¦    VOLDDD - Unit Address Decimal (KEY)                           ¦
  ¦    VOLNAM - Unit Name (at away site)                             ¦
  ¦             04/16/2001 Comdisco switched to 4 digit Unit Address ¦
  ¦             Std name is Unit Address folowed by XX               ¦
  ¦    VOLTYP - Type of Device                                       ¦
  ¦    VOLTGT - The VOLUME name of the VOLUME AT THE HOME SITE       ¦
  ¦             that will be put at this location.                   ¦
  ¦    VOLRST - The type of restore.                                 ¦
  ¦              "A" for incremental restore (FDR/ABR restore)       ¦
  ¦              "R" for restore (FDR restore)                       ¦
  ¦              "S" for restore (FDR restore) SMS volumes           ¦
  ¦              "K" for restore with compaction from backup tape    ¦
  ¦              "I" for initialize (ICK/DSF)                        ¦
  ¦              "J" for initialize (ICK/DSF) SMS volume             ¦
  ¦              "C" for clear volser (ICK/DSF)                      ¦
  ¦    VOLSKL - Name of the JCL Skeleton To Use When Building the Job¦
  ¦    VOLSTA - Status of the job - BUILT, SUBMIT, CHECKED, ENDED    ¦
  ¦    VOLVTS - Vtoc Size                                            ¦
  ¦    VOLIDX - "Y" = Indexed "N" = Not Indexed                      ¦
  ¦    VOLVVD - "Y" = Build VVDS  "N" = Do Not Allocate VVDS         ¦
  ¦    VOLTAP - WEEKLY, QUARTLY, or DISASTER tape for restore        ¦
  ¦    VOLGDG - The relative gdg for the restore tape                ¦
  ¦    VOLJBN - Generated Job Name                                   ¦
  ¦    VOLJBS - Submitted Job Id with Job Status Description         ¦
  ¦    VOLJDS - JobStatus Description for scan                       ¦
  ¦              "    "         Not yet submitted                    ¦
  ¦              "HOLD WAIT"    Waiting for execution, OPER Hold     ¦
  ¦              "WAIT"         Waiting for execution                ¦
  ¦              "EXECUTE"      Executing in batch                   ¦
  ¦              "OUTPUT"       Job finished with output             ¦
  ¦                                                                  ¦
  *------------------------------------------------------------------*/

 proc_create_table:

     "TBEND" c_table_name           /* End it if its open   */
     "TBERASE" c_table_name         /* Nuke it if its there */

     "TBCREATE" c_table_name "WRITE KEYS(VOLDDD)" ,
               "NAMES(VOLUUU VOLNAM VOLTYP VOLTGT VOLRST VOLSKL" ,
                     "VOLSTA VOLVTS VOLIDX VOLVVD VOLTAP VOLGDG" ,
                     "VOLJBN VOLJBS VOLJDS)"

     if rc ¬= 0 then
        do
          say "RCVRCNFG - Table Create Error" RC
          return 8
        end

     "TBSORT" c_table_name "FIELDS(VOLDDD,CH,A)"

     "TBSAVE" c_table_name "REPLCOPY"

     if rc ¬= 0 then
        do
          say "RCVRCNFG - Table Save Error."
          "TBEND" c_table_name
          return 8
        end

     return 0

 /*------------------------------------------------------------------*
  ¦ SUB-ROUTINE - Display Table of Volumes PROC_DISPLAY_PANEL        ¦
  ¦                                                                  ¦
  ¦    This subroutine displays the table of volumes until the       ¦
  ¦    user presses the PF3 key.                                     ¦
  ¦                                                                  ¦
  ¦    If a command is entered or a table row is selected then       ¦
  ¦    the command or selected rows are processed.                   ¦
  ¦                                                                  ¦
  *------------------------------------------------------------------*/

 proc_display_panel:

     c_top = 1                      /* Row number of top of display */

     do forever                     /* Display Loop                 */

        "TBTOP" c_table_name        /* Skip to current display line */

        "TBSKIP" c_table_name "NUMBER("||c_top||")"

        ZCMD = ""                   /* Set Select Codes to NULL     */
        S = ""

        "TBDISPL" c_table_name "PANEL(CNFGDISP)"  /* Display Table */

        c_top = ZTDTOP              /* Set Current Top             */

        /*---------------------------------------------------------*
         ¦ Process Response                                        ¦
         ¦     RC = 0 or 4 Means a COMMAND was entered             ¦
         ¦                 and/or rows were selected               ¦
         ¦     RC = 8      Means the EXIT command was entered or   ¦
         ¦                 PF3 was pressed                         ¦
         ¦     RC =        All other return codes are errors       ¦
         *---------------------------------------------------------*/

        select

              when (rc = 0 | rc = 4) & ZCMD ¬= "" then
                   do
                     x = vreply("CNFGDISP",ZCMD)
                     if x ¬= 0 then
                        do
                          say "RCVRCNFG - Invalid Command"
                          iterate
                        end
                     c_call = "call proc_process_"||ZCMD
                     interpret c_call
                   end

              when (rc = 0 | rc = 4) & ZCMD = "" then
                   do
                     call proc_process_select_codes
                   end

              when rc = 8 then
                   do
                     say "RCVRCNFG - Processing Complete."
                     leave
                   end

        otherwise
                 do
                   say "RCVRCNFG - Error" rc "on Display."
                   return 12
                 end
        end
     end

     return 0

 /*------------------------------------------------------------------*
  ¦ The ZCMD Sub Routines Follow                                     ¦
  *------------------------------------------------------------------*/

 /*------------------------------------------------------------------*
  ¦ SUB-ROUTINE - Add Volumes To Table - PROC_PROCESS_ADDVOL         ¦
  ¦                                                                  ¦
  ¦ This sub-routine adds one or more volumes to the volume          ¦
  ¦ table. The tables rows are created with the unit name,           ¦
  ¦ the unit address, device type and model and defaults for         ¦
  ¦ the remaining fields. The defaults can be changed by altering    ¦
  ¦ the defaults table below.                                        ¦
  ¦                                                                  ¦
  *------------------------------------------------------------------*/

 proc_process_addvol:

  /* DEFAULTS_TABLE - These values are interpretive. That is,
     they are set by the INTERPRET command so that values can be
     built from variables for the value is not known */

  c_default_VOLNAM = "c_add_VOLUUU.x||c_add_VOLUUU.x"   /* 3 dgt UCB */
  c_default_VOLNAM = "c_add_VOLUUU.x||'XX'"             /* 4 dgt UCB */
  c_default_VOLTGT = "'VOL'||c_add_VOLUUU.x"
  c_default_VOLTGT = "'VL'||RIGHT(c_add_VOLUUU.x,4,'0')"
  c_default_VOLRST = "'R'"
  /* c_default_VOLSKL = "'AGCOSKEL'" */
  c_default_VOLSKL = "c_skel_mem"
  c_default_VOLSTA = "''"
  c_default_VOLVTS = "'75'"
  c_default_VOLIDX = "'Y'"
  c_default_VOLVVD = "'Y'"
  c_default_VOLTAP = "'DISASTER'"
  c_default_VOLGDG = "'0'"
  c_default_VOLJBN = "''"
  c_default_VOLJBS = "' '"
  c_default_VOLJDS = "' '"

  c_def_array.0  = 13
  c_def_array.1  = "VOLNAM"
  c_def_array.2  = "VOLTGT"
  c_def_array.3  = "VOLRST"
  c_def_array.4  = "VOLSKL"
  c_def_array.5  = "VOLSTA"
  c_def_array.6  = "VOLVTS"
  c_def_array.7  = "VOLIDX"
  c_def_array.8  = "VOLVVD"
  c_def_array.9  = "VOLTAP"
  c_def_array.10 = "VOLGDG"
  c_def_array.11 = "VOLJBN"
  c_def_array.12 = "VOLJBS"
  c_def_array.13 = "VOLJDS"

  /* ADDRESS TRANSLATION TABLE - USED TO BUILD AN ADDRESS RANGE */

  c_address_tran.0  = 16
  c_address_tran.1  = "0"
  c_address_tran.2  = "1"
  c_address_tran.3  = "2"
  c_address_tran.4  = "3"
  c_address_tran.5  = "4"
  c_address_tran.6  = "5"
  c_address_tran.7  = "6"
  c_address_tran.8  = "7"
  c_address_tran.9  = "8"
  c_address_tran.10 = "9"
  c_address_tran.11 = "A"
  c_address_tran.12 = "B"
  c_address_tran.13 = "C"
  c_address_tran.14 = "D"
  c_address_tran.15 = "E"
  c_address_tran.16 = "F"

  /* VALID DEVICE TYPE TABLE
     The letters relate to density as in S(ingle) D(ual) T(riple) */

  c_valid_device.0 = 6
  c_valid_device.1 = "3380S"   /* S - Single */
  c_valid_device.2 = "3380D"   /* D - Double */
  c_valid_device.3 = "3380T"   /* T - Triple */
  c_valid_device.4 = "3390S"
  c_valid_device.5 = "3390D"
  c_valid_device.6 = "3390T"

  /* ARRAY OF VOLUMES TO ADD */

  c_add_count = 0

  c_add_VOLDDD. = ""
  c_add_VOLUUU. = ""
  c_add_VOLTYP. = ""

  "CONTROL DISPLAY SAVE"       /* Save the Table Display */

  ADDUUU = ""                  /* Initilize Panel Fields */
  ADDTYP = ""
  ADDCNT = ""

  do forever                   /* Panel Display Loop     */

     ZCMD = ""

     "DISPLAY PANEL(CNFGADDV)"

     select

           when rc = 8 then         /* EXIT Requested     */
                do
                  c_add_count = 0
                  leave
                end

           when rc = 0 then         /* EXIT Requested     */
                do
                  call proc_verify_add_data

                  select

                         when result = 4 then    /* Null Panel */
                              do
                                leave
                              end

                         when result = 0 then    /* Data Is Good */
                              do
                                call proc_add_data_to_array
                             /* ADDUUU = ""      Keep prior UUU + 1 */
                                ADDCNT = ""
                             /* ADDTYP = ""      Keep prior type    */
                              end

                  otherwise                      /* Data Is Bad */
                           do
                             iterate
                           end
                  end

                end

     otherwise
              do
                say "RCVRCNFG - Unexpected Error on Display."
                c_add_count = 0
                leave
              end
     end
  end

  if c_add_count > 0 then
     do                                   /* Add Data To Table */
       do x = 1 to c_add_count by 1
                                          /* Set Defaults      */
          do y = 1 to c_def_array.0 by 1
             c_get_value = "c_def_value = c_default_"||c_def_array.y
             interpret c_get_value
             c_set_default = c_def_array.y "=" c_def_value
             interpret c_set_default
          end y

          VOLUUU = c_add_VOLUUU.x
          VOLDDD = X2D(c_add_VOLUUU.x)
          VOLTYP = c_add_VOLTYP.x

          VOLJBN = 'V'||VOLRST||c_add_VOLUUU.x

          "TBADD" c_table_name "ORDER"  /* Add the entry */

          if rc = 8 then
             do
               say "RCVRCNFG - DASD Unit at Address:" VOLUUU ,
                   "Already Exists."
             end

       end x

     "TBSAVE" c_table_name "REPLCOPY"   /* Save the additions */

     end

  "CONTROL DISPLAY RESTORE"    /* Restore the Table Display */

  return 0

 /*------------------------------------------------------------------*
  ¦ SUB-ROUTINE - Verify Data Entry Panel PROC_VERIFY_ADD_DATA       ¦
  ¦                                                                  ¦
  ¦ This sub-routine verifys the data entered on the data entry      ¦
  ¦ panel.                                                           ¦
  ¦                                                                  ¦
  ¦ (1) The minimum count is 1 and the maximum is 128                ¦
  ¦ (2) The device type must be in the verification table            ¦
  ¦ (3) If the count of devices is null then return with a "4"       ¦
  ¦                                                                  ¦
  *------------------------------------------------------------------*/

 proc_verify_add_data:

      if ADDCNT = "" then
         do
           return 4
         end

      if length(ADDUUU) < 3 then
         do
           say "RCVRCNFG - Unit Address Is Incorrect Length."
           return 8
         end

      c_ver_hex = datatype(strip(ADDUUU), 'x')
      if c_ver_hex ¬= 1 then
        do
           say "RCVRCNFG - Unit Address Is Invalid - Not Hexidecimal"
           return 8
        end

      if datatype(strip(ADDCNT), 'W') ¬=1  then
         do
           say "RCVRCNFG - Address Range Is Not Integer."
           return 8
         end

      if ADDCNT < 1 | ADDCNT > 128 then
         do
           say "RCVRCNFG - Address Range Is Not Valid (1 - 128)."
           return 8
         end

      /* Verify Device Types   */

      do x = 1 to c_valid_device.0 by 1

         if c_valid_device.x = ADDTYP then
            do
              leave
            end

      end x

      if x > c_valid_device.0 then
         do
           say "RCVRCNFG - Device Type Is Invalid."
           say "           3380S  3380 Single     "
           say "           3380D  3380 Double     "
           say "           3380T  3380 Triple     "
           say "           3390S  3390 Single     "
           say "           3390D  3390 Double     "
           say "           3390T  3390 Triple     "
           return 8
         end

      return 0

 /*------------------------------------------------------------------*
  ¦ SUB-ROUTINE - Add Data to Volume Array PROC_ADD_DATA_TO_ARRAY    ¦
  ¦                                                                  ¦
  ¦ This sub-routine adds data to add data array.                    ¦
  *------------------------------------------------------------------*/

 proc_add_data_to_array:

      c_vol_num = X2D(strip(ADDUUU))

      /* Add Entries To Table */

      x = 0

      do y = 1 to ADDCNT by 1

         c_add_count = c_add_count + 1
         z = c_add_count

         c_add_VOLUUU.z = RIGHT(D2X(c_vol_num + x),3,'0')  /* 3 dgt */
         c_add_VOLUUU.z = RIGHT(D2X(c_vol_num + x),4,'0')  /* 4 dgt */
         c_add_VOLDDD.z = c_vol_num + x
         c_add_VOLTYP.z = ADDTYP

         x = x + 1

      end y

      ADDUUU = RIGHT(D2X(c_vol_num + x),3,'0')             /* 3 dgt */
      ADDUUU = RIGHT(D2X(c_vol_num + x),4,'0')             /* 4 dgt */

      return 0

 /*------------------------------------------------------------------*
  ¦ SUB-ROUTINE - Build Jcl              PROC_PROCESS_BLDJCL         ¦
  ¦                                                                  ¦
  ¦ This sub-routine builds JCL into the JOBLIB Dataset using the    ¦
  ¦ indicated skeleton in the table row(s).                          ¦
  ¦                                                                  ¦
  *------------------------------------------------------------------*/

 proc_process_bldjcl:

      "CONTROL DISPLAY SAVE"          /* Save The Table Display */

      "TBTOP" c_table_name

      "TBSKIP" c_table_name

      if rc = 8 then
         do
           say "RCVRCNFG - JCL Cannot Be Built For Empty Table."
           return 0
         end

      do until rc ¬= 0

         call proc_process_select_code_j

         "TBSKIP" c_table_name

      end

      "TBSAVE" c_table_name "REPLCOPY" /* Save Table            */

      "CONTROL DISPLAY RESTORE"        /* Restore Table Display */

      return 0

 /*------------------------------------------------------------------*
  ¦ SUB-ROUTINE - Submit Jobs            PROC_PROCESS_SUBJOB         ¦
  ¦                                                                  ¦
  ¦ This sub-routine submits all jobs.                               ¦
  ¦                                                                  ¦
  *------------------------------------------------------------------*/

 proc_process_subjob:

      "CONTROL DISPLAY SAVE"          /* Save The Table Display */

      "TBTOP" c_table_name

      "TBSKIP" c_table_name

      if rc = 8 then
         do
           say "RCVRCNFG - Jobs Cannot Be Submitted For" ,
               "Empty Table."
           return 0
         end

      do until rc ¬= 0

         call proc_process_select_code_s

         "TBSKIP" c_table_name

      end

      "TBSAVE" c_table_name "REPLCOPY" /* Save Table            */

      "CONTROL DISPLAY RESTORE"        /* Restore Table Display */

      return 0

 /*------------------------------------------------------------------*
  ¦ SUB-ROUTINE - DO Over -              PROC_PROCESS_DOOVER         ¦
  ¦                                                                  ¦
  ¦ This sub-routine deletes and initilizes the table                ¦
  ¦                                                                  ¦
  *------------------------------------------------------------------*/

 proc_process_doover:

     "FTOPEN"

     if rc ¬= 0 then
        do
          say "RCVRCNFG - Unable To Open File Tailoring File."
          return 8
        end

  /* "CONTROL DISPLAY SAVE"           * Save The Table Display */

     "TBTOP" c_table_name

     "TBSKIP" c_table_name

     if rc = 8 then
        do
          say "RCVRCNFG - JCL Cannot Be Removed For" ,
              "Empty Table."
           return 0
         end

     do until rc ¬= 0

        "FTERASE ZB"||VOLNAM

        if rc > 8 then
           do
             say "RCVRCNFG - Error erasing submit member: ZB" VOLNAM
             say "RCVRCNFG - For Unit:" VOLUUU VOLNAM VOLTGT ,
                                               VOLTYP
             "FTCLOSE"
             return 8
           end

         "TBSKIP" c_table_name

     end

  /* "TBSAVE" c_table_name "REPLCOPY"  * Save Table            */

     "FTCLOSE"

  /* "CONTROL DISPLAY RESTORE"         * Restore Table Display */

      call proc_create_table

      if result ¬= 0 then
         do
           exit 12
         end

      c_top = 1

      return 0

 /*------------------------------------------------------------------*
  ¦ SUB-ROUTINE - Secure Volume -        PROC_PROCESS_SECURE         ¦
  ¦                                                                  ¦
  ¦ This sub-routine deletes and initilizes the table to initialize  ¦
  ¦ old volser with new VTOC ::: security :::                        ¦
  ¦                                                                  ¦
  *------------------------------------------------------------------*/

 proc_process_secure:

      "CONTROL DISPLAY SAVE"          /* Save The Table Display */

      "TBTOP" c_table_name

      "TBSKIP" c_table_name

      if rc = 8 then
         do
           say "RCVRCNFG - Jobs Cannot Be Create For Empty Table."
           return 0
         end

      do until rc ¬= 0

         VOLRST = "C"

         "TBPUT" c_table_name "ORDER"

         "TBSKIP" c_table_name

      end

      "TBSAVE" c_table_name "REPLCOPY" /* Save Table            */

      "CONTROL DISPLAY RESTORE"        /* Restore Table Display */

      return 0

 /*------------------------------------------------------------------*
  ¦ SUB-ROUTINE - Check Dup Volumes -    PROC_PROCESS_DUPVOL         ¦
  ¦                                                                  ¦
  ¦                                                                  ¦
  ¦    This subroutine checks for duplicate assigned volumes.  The   ¦
  ¦    first duplicate ends this routine with an error message. A    ¦
  ¦    message is presented if no errors are found.                  ¦
  ¦                                                                  ¦
  *------------------------------------------------------------------*/

 proc_process_dupvol:

     c_top = 1                      /* Row number of top of display */

                         /* Sort the table in assigned volume order */
     "TBSORT" c_table_name "FIELDS(VOLTGT)"

     v_voltgt = ' '                 /* Place holder for volume name */
     v_volrc  = 0                   /* Switch for duplicates        */

     "TBTOP" c_table_name           /* Set to top of table          */

     do forever                     /* Duplicate check loop         */

        "TBSKIP" c_table_name "NUMBER("||c_top||")"

         if rc ¬= 0 then
             do
              if v_volrc = 0 then
                SAY "No Duplicates assigned volumes found"
              leave
             end

         if VOLTGT = v_voltgt then
             do
              SAY "Duplicate assigned volume found:" VOLTGT
              v_volrc = 1
             end

         v_voltgt = VOLTGT

     end

     "TBSORT" c_table_name "FIELDS(VOLDDD,CH,A)"

     return 0

 /*------------------------------------------------------------------*
  ¦ SUB-ROUTINE - Edit Volumes  -        PROC_PROCESS_EDTVOL         ¦
  ¦                                                                  ¦
  ¦                                                                  ¦
  ¦    This subroutine displays the table of volumes until the       ¦
  ¦    user presses the PF3 key.                                     ¦
  ¦                                                                  ¦
  ¦    If a table row is selected then selected rows are processed.  ¦
  ¦                                                                  ¦
  *------------------------------------------------------------------*/

 proc_process_edtvol:

     c_top = 1                      /* Row number of top of display */

     do forever                     /* Display Loop                 */

        "TBTOP" c_table_name        /* Skip to current display line */

        "TBSKIP" c_table_name "NUMBER("||c_top||")"

        ZCMD = ""                   /* Set Select Codes to NULL     */
        S = ""

        "TBDISPL" c_table_name "PANEL(CNFGVSER)"  /* Display Table */

        c_top = ZTDTOP              /* Set Current Top             */

        /*---------------------------------------------------------*
         ¦ Process Response                                        ¦
         ¦     RC = 0 or 4 Means a COMMAND was entered             ¦
         ¦                 and/or rows were selected               ¦
         ¦     RC = 8      Means the EXIT command was entered or   ¦
         ¦                 PF3 was pressed                         ¦
         ¦     RC =        All other return codes are errors       ¦
         *---------------------------------------------------------*/

        select

              when (rc = 0 | rc = 4) & ZCMD ¬= "" then
                   do
                     say "RCVRCNFG - Invalid Command"
                     iterate
                   end

              when (rc = 0 | rc = 4) & ZCMD = "" then
                   do
                     call proc_process_select_code_edtvol
                   end

              when rc = 8 then
                   do
                     leave
                   end

        otherwise
                 do
                   say "RCVRCNFG - Error" rc "on Display."
                   return 12
                 end
        end
     end

     return 0

 /*------------------------------------------------------------------*
  ¦ SUB-ROUTINE - Display Job Status -   PROC_PROCESS_JOBSTA         ¦
  ¦                                                                  ¦
  ¦                                                                  ¦
  ¦    This subroutine displays job status of submitted JCL until    ¦
  ¦    the user presses the PF3 key.                                 ¦
  ¦                                                                  ¦
  ¦    If a table row is selected with a S then the selected job     ¦
  ¦    if in output status is viewed and job status is refreshed.    ¦
  ¦                                                                  ¦
  ¦    If command "REFRESH" is entered the job status will be        ¦
  ¦    refreshed.                                                    ¦
  ¦                                                                  ¦
  *------------------------------------------------------------------*/

 proc_process_jobsta:

     call proc_process_jobsta_upd   /* Update job status            */

     c_top = 1                      /* Row number of top of display */

     c_jobsta = "F"                 /* Set Job Status display type  */

     "TBVCLEAR" c_table_name        /* Reset Table variables    */
     VOLSTA = " "
     VOLJDS = "9"
     "TBSARG" c_table_name "NEXT NAMECOND(VOLSTA,NE,VOLJDS,NE)"

     do forever                     /* Display Loop                 */
         if c_jobsta = "F" then
           do
            "TBVCLEAR" c_table_name  /* Reset Table variables    */
            VOLSTA = " "
            VOLJDS = "9"
            "TBSARG" c_table_name "NEXT NAMECOND(VOLSTA,NE,VOLJDS,NE)"
            "TBTOP" c_table_name    /* Skip to current display line */

            "TBSKIP" c_table_name "NUMBER("||c_top||")"
           end
         else
           if c_jobsta = "C" Then
             do
               "TBVCLEAR" c_table_name  /* Reset Table variables    */
               VOLSTA = "SUBMIT"
               VOLJDS = "OUTPUT"
               "TBSARG" c_table_name "NEXT ",
                  "NAMECOND(VOLSTA,EQ,VOLJDS,EQ)"
             end
           else
             do
               say "RCVRCNFG - Error setting JOBSTA type of Display"
               return 12
             end

        ZCMD = ""                   /* Set Select Codes to NULL     */
        S = ""

        "TBDISPL" c_table_name "PANEL(CNFGJOBS)"  /* Display Table */

        c_top = ZTDTOP              /* Set Current Top             */

        /*---------------------------------------------------------*
         ¦ Process Response                                        ¦
         ¦     RC = 0 or 4 Means a COMMAND was entered             ¦
         ¦                 and/or rows were selected               ¦
         ¦     RC = 8      Means the EXIT command was entered or   ¦
         ¦                 PF3 was pressed                         ¦
         ¦     RC =        All other return codes are errors       ¦
         *---------------------------------------------------------*/

        select

              when (rc = 0 | rc = 4) & ZCMD = "REFRESH" then
                   do
                     c_jobsta = "F"
                     call proc_process_jobsta_upd  /* Updt job stat */
                     iterate
                   end

              when (rc = 0 | rc = 4) & ZCMD = "XCHECK" then
                   do
                          /* Get those fields with output only      */
                     c_jobsta = "C"
                     iterate
                   end

              when (rc = 0 | rc = 4) & ZCMD ¬= "" then
                   do
                     say "RCVRCNFG - Invalid Command" ZCMD
                     iterate
                   end

              when (rc = 0 | rc = 4) & ZCMD = "" then
                   do
                     call proc_process_jobsta_select_code
                   end

              when rc = 8 then
                   do
                     leave
                   end

        otherwise
                 do
                   say "RCVRCNFG - Error" rc "on Display."
                   return 12
                 end
        end
     end

     return 0

 /*------------------------------------------------------------------*
  ¦ SUB-ROUTINE - Update Job Status -   PROC_PROCESS_JOBSTA_UPD      ¦
  ¦                                                                  ¦
  ¦                                                                  ¦
  ¦    This subroutine updates job status of submitted restore jobs  ¦
  ¦                                                                  ¦
  *------------------------------------------------------------------*/

 proc_process_jobsta_upd:

     c_top = 1                      /* Row number of top of display */

     "TBTOP" c_table_name           /* Position to table top        */

     do forever                     /* JobStatus Loop               */

        "TBSKIP" c_table_name "NUMBER("||c_top||")"

         if rc ¬= 0 then
             do
              leave
             end

        x = OUTTRAP('STA.')

        address TSO

        "STATUS ("||VOLJBN||")"

        x = OUTTRAP('OFF')

        y = STA.0

        if y = 1 then
            do
              PARSE UPPER VAR STA.1 v_ikjfld v_jobfld v_jobid v_desc
            end
        else
        if y > 1 then
            do
              v_jobnmh = ''
              v_jobnmk = 1
              do x = 1 to STA.0 by 1
                PARSE UPPER VAR STA.x v_ikjfld v_jobfld v_jobid v_desc
                PARSE UPPER VAR v_jobid junk 7 v_jobnum +8 junk
                if v_jobnum > v_jobnmh then
                  do
                    v_jobnmh = v_jobnum
                    v_jobnmk = x
                  end
              end x
           PARSE UPPER VAR STA.v_jobnmk v_ikjfld v_jobfld v_jobid v_desc
            end

        vdesc  = ' '

        if v_desc = 'NOT FOUND' then do
          v_jobid = ''
        end

        if v_desc = 'WAITING FOR EXECUTION' then
          vdesc  = 'WAITING'

        if v_desc = 'WAITING FOR EXECUTION, IN HOLD STATUS' then
          vdesc  = 'HOLD WAITING'

        if v_desc = 'ON OUTPUT QUEUE' then
          vdesc  = 'OUTPUT'

        if v_desc = 'EXECUTING' then
          vdesc  = v_desc

        VOLJBS = v_jobid vdesc

        VOLJDS = vdesc

        address ISPEXEC

        "TBPUT" c_table_name "ORDER"

     end                            /* End JobStatus Update Loop    */

     "TBSAVE" c_table_name "REPLCOPY" /* Save Table            */

  return 0                          /* Return to caller             */

 /*------------------------------------------------------------------*
  ¦ The SELECT Codes Subroutines Follow                              ¦
  *------------------------------------------------------------------*/

 /*------------------------------------------------------------------*
  ¦ SUB-ROUTINE - Process Select Codes - PROC_PROCESS_SELECT_CODES   ¦
  ¦                                                                  ¦
  ¦ This sub-routine processes all rows selected by a user.          ¦
  ¦                                                                  ¦
  *------------------------------------------------------------------*/

 proc_process_select_codes:


      c_last_rc = 4                     /* Initialize Last Displ RC */

      do until c_last_rc = 0

         c_last_rc = rc                 /* Set Last RC to Current RC */

         x = vreply("CNFGDISP",S)       /* Check Select Code         */

         if x ¬= 0 then
            do
              say "RCVRCNFG - Select Code:" S "Not Valid."
            end
          else
            do
              if S = "" then             /* Translate Null           */
                 do
                   S = "M"
                 end

              c_call = "call proc_process_select_code_"||S
              interpret c_call
            end

         if c_last_rc = 0 then           /* Last rc = 0 means done */
            do
              nop
            end
          else
            do
              "TBDISPL" c_table_name     /* Get Next              */
            end
      end

      "TBSAVE" c_table_name "REPLCOPY"

      return 0

 /*------------------------------------------------------------------*
  ¦ SUB-ROUTINE - Process Select Codes - PROC_PROCESS_SELECT_CODE_EDT¦
  ¦                                                                  ¦
  ¦ This sub-routine processes all rows selected by a user.          ¦
  ¦                                                                  ¦
  *------------------------------------------------------------------*/

 proc_process_select_code_edtvol:


      c_last_rc = 4                     /* Initialize Last Displ RC */

      do until c_last_rc = 0

         c_last_rc = rc                 /* Set Last RC to Current RC */

         c_call = "call proc_process_select_code_m"
         interpret c_call

         if c_last_rc = 0 then           /* Last rc = 0 means done */
            do
              nop
            end
          else
            do
              "TBDISPL" c_table_name     /* Get Next              */
            end
      end

      "TBSAVE" c_table_name "REPLCOPY"

      return 0

 /*------------------------------------------------------------------*
  ¦ SUB-ROUTINE - Process Code  - PROC_PROCESS_JOBSTA_SELECT_CODE    ¦
  ¦                                                                  ¦
  ¦ This sub-routine processes all rows selected by a user which     ¦
  ¦ are in the OUTPUT queue only.  If multiple instances of the      ¦
  ¦ job occur, only show the highest job number.                     ¦
  ¦                                                                  ¦
  ¦ If the job is selected, output it to a dataset and delete it     ¦
  ¦ when finished.                                                   ¦
  ¦                                                                  ¦
  ¦ When the job is viewed, its status is set to checked and can     ¦
  ¦ not be viewed by this utility until it is built, submitted or    ¦
  ¦ ended.                                                           ¦
  ¦                                                                  ¦
  *------------------------------------------------------------------*/

 proc_process_jobsta_select_code:

     PARSE UPPER VAR VOLJBS v_job v_stat

     if v_stat ¬= 'OUTPUT' then    /* Is the line Qued for OUTPUT */
       return 0

     if S ¬= 'S' then              /* Was line selected?   */
       return 0

     if VOLSTA = 'CHECKED' then    /* Have we checked this job */
       return 0

 /*                                                         */
 /* Need to get output of job in output status only         */
 /* If multiple jobs of same name, only display the         */
 /* highest numbered one                                    */
 /*                                                         */
     address TSO                     /* Get Into TSO Mode   */

     vdsn = USERID()||".RECOVER."||VOLJBN

     "OUTPUT "||v_job||" HOLD KEEP PRINT('"||vdsn||"')"

     address ISPEXEC

     "BROWSE DATASET('"||vdsn||"')"

     address TSO                     /* Get Into TSO Mode   */

     x = OUTTRAP('VAR.')

     "DELETE "||vdsn||" SCRATCH NONVSAM"

     x = OUTTRAP('OFF')

     address ISPEXEC

     VOLSTA = 'CHECKED'

     "TBPUT" c_table_name "ORDER"

     call proc_process_jobsta_upd              /* Update job status */

     return 0

 /*------------------------------------------------------------------*
  ¦ SUB-ROUTINE - Submit JOB             PROC_PROCESS_SELECT_CODE_S  ¦
  ¦                                                                  ¦
  ¦ This sub-routine Submits a JOB                                   ¦
  ¦                                                                  ¦
  *------------------------------------------------------------------*/

 proc_process_select_code_s:

     address tso                     /* Get Into TSO Mode   */

    "SUBMIT '"||c_job_dsn||"(ZB"||VOLNAM||")'"

     address ispexec

     VOLSTA = "SUBMIT"

     "TBPUT" c_table_name "ORDER"

     return 0

 /*------------------------------------------------------------------*
  ¦ SUB-ROUTINE - Delete Entry           PROC_PROCESS_SELECT_CODE_D  ¦
  ¦                                                                  ¦
  ¦ This sub-routine deletes a volume from the table.                ¦
  ¦                                                                  ¦
  *------------------------------------------------------------------*/

 proc_process_select_code_d:

     "FTOPEN"

     if rc ¬= 0 then
        do
          say "RCVRCNFG - Unable To Open File Tailoring File."
          return 8
        end


     "FTERASE ZB"||VOLNAM

     if rc > 8 then
        do
          say "RCVRCNFG - Error erasing submit member: ZB" VOLNAM
          say "RCVRCNFG - For Unit:" VOLUUU VOLNAM VOLTGT ,
                                            VOLTYP
          "FTCLOSE"
          return 8
        end

     "FTCLOSE"

     "TBDELETE" c_table_name

     return 0

 /*------------------------------------------------------------------*
  ¦ SUB-ROUTINE - Edit Job               PROC_PROCESS_SELECT_CODE_E  ¦
  ¦                                                                  ¦
  ¦ This sub-routine edits a job deck.                               ¦
  ¦                                                                  ¦
  *------------------------------------------------------------------*/

 proc_process_select_code_e:

     "CONTROL DISPLAY SAVE"            /* Save the table display */

     "EDIT DATASET('"||c_job_dsn||"(ZB"||VOLNAM||")')"

     "CONTROL DISPLAY RESTORE"         /* Restore Table Display  */

     return 0

 /*------------------------------------------------------------------*
  ¦ SUB-ROUTINE - Edit Skeleton          PROC_PROCESS_SELECT_CODE_K  ¦
  ¦                                                                  ¦
  ¦ This sub-routine edits a skeleton.                               ¦
  ¦                                                                  ¦
  *------------------------------------------------------------------*/

 proc_process_select_code_k:

     "CONTROL DISPLAY SAVE"            /* Save the table display */

     "EDIT DATASET('"||c_skel_dsn||"("||VOLSKL||")')"

     "CONTROL DISPLAY RESTORE"         /* Restore Table Display  */

     return 0

 /*------------------------------------------------------------------*
  ¦ SUB-ROUTINE - Generate Job           PROC_PROCESS_SELECT_CODE_J  ¦
  ¦                                                                  ¦
  ¦ This sub-routine generates JCL                                   ¦
  ¦                                                                  ¦
  *------------------------------------------------------------------*/

 proc_process_select_code_j:

     "FTOPEN"

     if rc ¬= 0 then
        do
          say "RCVRCNFG - Unable To Open File Tailoring File."
          return 8
        end

     /* Set UNIT TYPE (minus density letter) */

     TUNIT = substr(VOLTYP,1,4,)

     "FTINCL" VOLSKL

     if rc ¬= 0 then
        do
          say "RCVRCNFG - Error processing skeleton:" VOLSKL
          say "RCVRCNFG - For Unit:" VOLUUU VOLNAM VOLTGT ,
                                            VOLTYP
          "FTCLOSE"
          return 8
        end

     "FTCLOSE NAME(ZB"||VOLNAM||")"

     if rc ¬= 0 then
        do
          say "RCVRCNFG - Error Saving JOB for volume:" ,
                                  VOLUUU VOLTGT VOLTYP VOLNAM
          "FTCLOSE"
          return 8
        end

     VOLSTA = "BUILT"

     "TBPUT" c_table_name "ORDER"

     return 0

 /*------------------------------------------------------------------*
  ¦ SUB-ROUTINE - Modify Entry           PROC_PROCESS_SELECT_CODE_M  ¦
  ¦                                                                  ¦
  ¦ This sub-routine updates the table row with data entered.        ¦
  ¦                                                                  ¦
  *------------------------------------------------------------------*/

 proc_process_select_code_m:

      VOLJBN = 'V'||VOLRST||VOLUUU  /* Build changed Job Name        */

     "TBPUT" c_table_name "ORDER"

     return 0

 /*------------------------------------------------------------------*
  ¦ SUB-ROUTINE - Post Complete          PROC_PROCESS_SELECT_CODE_P  ¦
  ¦                                                                  ¦
  ¦ This sub-routine updates the table row with a status of ENDED.   ¦
  ¦                                                                  ¦
  *------------------------------------------------------------------*/

 proc_process_select_code_p:

     VOLSTA = "ENDED"

     "TBPUT" c_table_name "ORDER"

     return 0

 /*------------------------------------------------------------------*
  ¦ Internal Function Routine                                        ¦
  ¦                                                                  ¦
  ¦ VREPLY - Verifys the validity of a select code or command.       ¦
  ¦                                                                  ¦
  ¦          call sequence VREPLY('panel_name','code')               ¦
  ¦                                                                  ¦
  ¦          result will be set to:                                  ¦
  ¦                                                                  ¦
  ¦                '0' - Valid Command or Select Code                ¦
  ¦                '8' - Invalid Command or Select Code              ¦
  ¦               '12' - Panel Unknown                               ¦
  ¦                                                                  ¦
  ¦          panel_name = The name of panel being processed          ¦
  ¦          code       = The Select Code or COMMAND to be           ¦
  ¦                       verified.                                  ¦
  ¦                                                                  ¦
  ¦                       Note: When length of code is 1 then        ¦
  ¦                             its a sel code, when > 1 its a       ¦
  ¦                             command.                             ¦
  ¦                                                                  ¦
  *------------------------------------------------------------------*/

VREPLY: PROCEDURE

 /*------------------------------------------------------------------*
  ¦ Set command and selection code constants. This consists of       ¦
  ¦ two tables for each display.                                     ¦
  ¦                                                                  ¦
  ¦       (1) A table of valid commands.                             ¦
  ¦       (2) A table of valid select codes.                         ¦
  ¦                                                                  ¦
  ¦ This technique allows subroutines and commands to be added withou¦
  ¦ changing or replacing code, just add the command or select code  ¦
  ¦ to the table and add subroutines as required. You can make this  ¦
  ¦ table and the verification functions external.                   ¦
  ¦                                                                  ¦
  *------------------------------------------------------------------*/

  c_cmd_cnfgdisp.0 = 8
  c_cmd_cnfgdisp.1 = "BLDJCL"
  c_cmd_cnfgdisp.2 = "SUBJOB"
  c_cmd_cnfgdisp.3 = "ADDVOL"
  c_cmd_cnfgdisp.4 = "DOOVER"
  c_cmd_cnfgdisp.5 = "SECURE"
  c_cmd_cnfgdisp.6 = "EDTVOL"
  c_cmd_cnfgdisp.7 = "DUPVOL"
  c_cmd_cnfgdisp.8 = "JOBSTA"

  c_sel_cnfgdisp.0 = 8
  c_sel_cnfgdisp.1 = "S"
  c_sel_cnfgdisp.2 = "D"
  c_sel_cnfgdisp.3 = "E"
  c_sel_cnfgdisp.4 = "K"
  c_sel_cnfgdisp.5 = "J"
  c_sel_cnfgdisp.6 = "P"
  c_sel_cnfgdisp.7 = "M"
  c_sel_cnfgdisp.8 = ""

  c_cmd_cnfgaddv.0 = 0

  c_sel_cnfgaddv.0 = 0

  parse arg c_panel, c_code, .  /* Get the panel name and the args */


                                /* A code with a length of one is a
                                   selection (or zero) */

  if length(c_code) = 0 | length(c_code) = 1 then
     do
       c_type = "sel"
     end
   else
     do
       c_type = "cmd"
     end

                                /* Panel must not be null and must
                                   be known to routine */

  if length(c_panel) = 0 then
     do
       return 12
     end
                                /* Build name of array */

  c_array_name = "c_"||c_type||"_"||c_panel

                                /* Set up to get the datatype */

  c_verify = "c_datatype = datatype("||c_array_name||".0,'N')"

  interpret c_verify

                                /* If its not numeric its an error */

  if c_datatype ¬= 1 then
     do
       return 12
     end

                                /* Initialize Loop Variables

                                    (1) Set up to get the number of
                                        entries in the array.
                                    (2) Set the loop counter.

                                */

  c_get_loop_counter = "c_array_entries =" c_array_name||".0"
  interpret c_get_loop_counter

                                /*  Verify loop - check each entry
                                    if the loop 'falls through' its
                                    not found and invalid */

  do x = 1 to c_array_entries by 1

     c_get_comparand = "c_compare =" c_array_name||"."||x

     interpret c_get_comparand

     if c_compare = c_code then
        do
          return 0
        end

  end x

  return 8  /* Command or select code not found */
